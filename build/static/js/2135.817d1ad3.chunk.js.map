{"version":3,"file":"static/js/2135.817d1ad3.chunk.js","mappings":"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","sources":["components/MyDataGrid.jsx","components/FriendlyAgeFilterDataGrid.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { Box } from \"@mui/material\";\r\n\r\nconst MyDataGrid = ({\r\n  height = 500,\r\n  minWidth = 320,\r\n  sx = {},\r\n  columns,\r\n  ...props\r\n}) => {\r\n  const DEFAULT_MIN_WIDTH = 100;\r\n\r\n  const columnsWithMinWidth = React.useMemo(() => {\r\n    if (!columns) return [];\r\n    return columns.map((col) => ({\r\n      ...col,\r\n      minWidth: col.minWidth ?? DEFAULT_MIN_WIDTH,\r\n      flex: col.flex ?? 1, // Responsive column sizing\r\n    }));\r\n  }, [columns]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height,\r\n        width: \"100%\",\r\n        minWidth,\r\n        overflow: \"hidden\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        ...sx,\r\n      }}\r\n    >\r\n      <DataGrid\r\n        columns={columnsWithMinWidth}\r\n        {...props}\r\n        sx={{\r\n          flex: 1,\r\n          minWidth: 0,\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyDataGrid;\r\n","import React, { useState, useMemo } from \"react\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  TextField,\r\n  MenuItem,\r\n  Select,\r\n  InputLabel,\r\n  FormControl,\r\n} from \"@mui/material\";\r\nimport MyDataGrid from \"./MyDataGrid\";\r\n\r\n// Sample data\r\nconst rows = [\r\n  { id: 1, name: \"John\", age: 25 },\r\n  { id: 2, name: \"Alice\", age: 30 },\r\n  { id: 3, name: \"Bob\", age: 20 },\r\n  { id: 4, name: \"Eve\", age: 35 },\r\n];\r\n\r\n// Columns\r\nconst columns = [\r\n  { field: \"id\", headerName: \"ID\", width: 70 },\r\n  { field: \"name\", headerName: \"Name\", width: 150 },\r\n  { field: \"age\", headerName: \"Age\", width: 100 },\r\n];\r\n\r\n// Filter options\r\nconst filterOptions = [\r\n  { label: \"Equal to\", value: \"=\" },\r\n  { label: \"Greater than\", value: \">\" },\r\n  { label: \"Less than\", value: \"<\" },\r\n  { label: \"Greater or equal\", value: \">=\" },\r\n  { label: \"Less or equal\", value: \"<=\" },\r\n  { label: \"Not equal\", value: \"!=\" },\r\n  { label: \"Between\", value: \"between\" },\r\n];\r\n\r\nexport default function FriendlyAgeFilterDataGrid() {\r\n  const [operator, setOperator] = useState(\"=\");\r\n  const [filterAge, setFilterAge] = useState(\"\");\r\n  const [minAge, setMinAge] = useState(\"\");\r\n  const [maxAge, setMaxAge] = useState(\"\");\r\n\r\n  const filteredRows = useMemo(() => {\r\n    const parsedAge = parseInt(filterAge);\r\n    const min = parseInt(minAge);\r\n    const max = parseInt(maxAge);\r\n\r\n    if (operator === \"between\") {\r\n      if (isNaN(min) || isNaN(max)) return rows;\r\n      return rows.filter((row) => row.age >= min && row.age <= max);\r\n    }\r\n\r\n    if (isNaN(parsedAge)) return rows;\r\n\r\n    return rows.filter((row) => {\r\n      switch (operator) {\r\n        case \">\":\r\n          return row.age > parsedAge;\r\n        case \"<\":\r\n          return row.age < parsedAge;\r\n        case \"=\":\r\n          return row.age === parsedAge;\r\n        case \">=\":\r\n          return row.age >= parsedAge;\r\n        case \"<=\":\r\n          return row.age <= parsedAge;\r\n        case \"!=\":\r\n          return row.age !== parsedAge;\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n  }, [operator, filterAge, minAge, maxAge]);\r\n\r\n  return (\r\n    <Box sx={{ p: 2 }}>\r\n      <Grid container spacing={2} alignItems=\"center\" mb={2}>\r\n        <Grid item xs={12} sm={4}>\r\n          <FormControl fullWidth>\r\n            <InputLabel>Filter Type</InputLabel>\r\n            <Select\r\n              value={operator}\r\n              label=\"Filter Type\"\r\n              onChange={(e) => setOperator(e.target.value)}\r\n            >\r\n              {filterOptions.map((option) => (\r\n                <MenuItem key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n\r\n        {operator === \"between\" ? (\r\n          <>\r\n            <Grid item xs={6} sm={4}>\r\n              <TextField\r\n                label=\"Min Age\"\r\n                type=\"number\"\r\n                value={minAge}\r\n                onChange={(e) => setMinAge(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} sm={4}>\r\n              <TextField\r\n                label=\"Max Age\"\r\n                type=\"number\"\r\n                value={maxAge}\r\n                onChange={(e) => setMaxAge(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              type=\"number\"\r\n              label=\"Age\"\r\n              value={filterAge}\r\n              onChange={(e) => setFilterAge(e.target.value)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n      <MyDataGrid rows={filteredRows} columns={columns} />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["_ref","height","minWidth","sx","columns","props","_objectWithoutProperties","_excluded","columnsWithMinWidth","React","map","col","_col$minWidth","_col$flex","_objectSpread","flex","_jsx","Box","width","overflow","display","flexDirection","children","DataGrid","rows","id","name","age","field","headerName","filterOptions","label","value","FriendlyAgeFilterDataGrid","operator","setOperator","useState","filterAge","setFilterAge","minAge","setMinAge","maxAge","setMaxAge","filteredRows","useMemo","parsedAge","parseInt","min","max","isNaN","filter","row","_jsxs","p","Grid","container","spacing","alignItems","mb","item","xs","sm","FormControl","fullWidth","InputLabel","Select","onChange","e","target","option","MenuItem","_Fragment","TextField","type","MyDataGrid"],"sourceRoot":""}