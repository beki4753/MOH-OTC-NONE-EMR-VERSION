{"version":3,"file":"static/js/512.0073ab2a.chunk.js","mappings":"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","sources":["pages/dashboard/AdminDashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Box, Typography, useTheme } from \"@mui/material\";\r\nimport { tokens } from \"../../theme\";\r\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\";\r\nimport AccountBalanceIcon from \"@mui/icons-material/AccountBalance\";\r\nimport ApartmentIcon from \"@mui/icons-material/Apartment\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { StatBox } from \"../../components\";\r\nimport { GeographyChart } from \"../../components\";\r\n\r\nimport api from \"../../utils/api\";\r\n\r\nimport { useRef } from \"react\";\r\n\r\nconst AdminDashboard = () => {\r\n  const theme = useTheme();\r\n  const colors = tokens(theme.palette.mode);\r\n  const dashboardRef = useRef(null);\r\n\r\n  const [userAdded, setUserAdded] = useState(0);\r\n  const [organizationcount, setOrganizationcount] = useState(0);\r\n  const [countBanker, setCountBanker] = useState(0);\r\n  const [orgList, setOrgList] = useState([]);\r\n  const [userType, setUserType] = useState([]);\r\n  const [cbhiProvider, setCbhiProvider] = useState(0);\r\n\r\n  const today = new Date();\r\n  const startDate = new Date(today);\r\n  startDate.setDate(today.getDate() - 7);\r\n  const yesterday = new Date(today);\r\n  yesterday.setDate(today.getDate() - 1);\r\n\r\n  const collectionnStartDate = new Date(today);\r\n  collectionnStartDate.setDate(today.getDate() - 30);\r\n  // Fetch uncollected data\r\n  useEffect(() => {\r\n    const fetchUserList = async () => {\r\n      try {\r\n        const response = await api.get(\"/Admin/users\");\r\n\r\n        const data = response?.data;\r\n\r\n        const summary = data.reduce((acc, user) => {\r\n          const { userType } = user;\r\n          acc[userType] = (acc[userType] || 0) + 1;\r\n          return acc;\r\n        }, {});\r\n\r\n        const totalUser = Object.values(summary).reduce(\r\n          (acc, total) => acc + total,\r\n          0\r\n        );\r\n\r\n        const barData = Object.entries(summary).map(([key, value]) => ({\r\n          type: key,\r\n          No_of_User: value,\r\n        }));\r\n\r\n        setUserAdded(totalUser);\r\n\r\n        setUserType(barData);\r\n      } catch (error) {\r\n        console.error(\"This is fetchUserList Error : \", error);\r\n      }\r\n    };\r\n\r\n    fetchUserList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchOrganization = async () => {\r\n      try {\r\n        const response = await api.get(\"/Organiztion/Organization\");\r\n\r\n        const data = response?.data;\r\n\r\n        const totalOrganization = data.length;\r\n\r\n        setOrganizationcount(totalOrganization);\r\n        setOrgList(data);\r\n      } catch (error) {\r\n        console.error(\"This is fetchOrganization Error : \", error);\r\n      }\r\n    };\r\n\r\n    fetchOrganization();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchBanker = async () => {\r\n      try {\r\n        const response = await api.get(\"/Organiztion/get-workers\");\r\n\r\n        const data = response?.data;\r\n\r\n        const countBanker = data?.length;\r\n\r\n        setCountBanker(countBanker);\r\n      } catch (error) {\r\n        console.error(\"This is fetchBanker Error : \", error);\r\n      }\r\n    };\r\n\r\n    fetchBanker();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchCBHI = async () => {\r\n      try {\r\n        const response = await api.get(\"/Providers/list-providers\");\r\n\r\n        const data = response?.data;\r\n\r\n        const totalProvider = new Set(data.map((item) => item.provider)).size;\r\n\r\n        setCbhiProvider(totalProvider);\r\n      } catch (error) {\r\n        console.error(\"This is fetchCBHI Error : \", error);\r\n      }\r\n    };\r\n\r\n    fetchCBHI();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div ref={dashboardRef} style={{ padding: \"20px\" }}>\r\n        <h1>Welcome to Admin Dashboard</h1>\r\n\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n          mb={4}\r\n        ></Box>\r\n        <Box\r\n          display=\"grid\"\r\n          gridTemplateColumns=\"repeat(12, 1fr)\"\r\n          gridAutoRows=\"140px\"\r\n          gap=\"20px\"\r\n        >\r\n          {/* ROW 1 - STAT CARDS */}\r\n          {[\r\n            {\r\n              title: userAdded || 0,\r\n              subtitle: \"No of User Added\",\r\n              icon: (\r\n                <PersonAddIcon\r\n                  sx={{ color: colors.greenAccent[600], fontSize: \"26px\" }}\r\n                />\r\n              ),\r\n            },\r\n            {\r\n              title: organizationcount,\r\n              subtitle: \"Total Organization Count\",\r\n              icon: (\r\n                <ApartmentIcon\r\n                  sx={{ color: colors.greenAccent[600], fontSize: \"26px\" }}\r\n                />\r\n              ),\r\n            },\r\n            {\r\n              title: countBanker,\r\n              subtitle: \"Total Banker \",\r\n              icon: (\r\n                <AccountBalanceIcon\r\n                  sx={{ color: colors.greenAccent[600], fontSize: \"26px\" }}\r\n                />\r\n              ),\r\n            },\r\n            {\r\n              title: cbhiProvider,\r\n              subtitle: \"Number of Provider\",\r\n              icon: (\r\n                <ApartmentIcon\r\n                  sx={{ color: colors.greenAccent[600], fontSize: \"26px\" }}\r\n                />\r\n              ),\r\n            },\r\n          ].map((stat, index) => (\r\n            <Box\r\n              key={index}\r\n              gridColumn=\"span 3\"\r\n              backgroundColor={colors.primary[400]}\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n            >\r\n              <StatBox\r\n                title={stat.title}\r\n                subtitle={stat.subtitle}\r\n                progress={stat.progress}\r\n                increase={stat.increase}\r\n                icon={stat.icon}\r\n              />\r\n            </Box>\r\n          ))}\r\n          <Box\r\n            gridColumn=\"span 4\"\r\n            gridRow=\"span 2\"\r\n            backgroundColor={colors.primary[400]}\r\n            overflow=\"auto\"\r\n          >\r\n            <Box\r\n              display=\"flex\"\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n              p=\"15px\"\r\n            >\r\n              <Typography\r\n                color={colors.grey[100]}\r\n                variant=\"h5\"\r\n                fontWeight=\"600\"\r\n              >\r\n                Organization list with Proper Location\r\n              </Typography>\r\n            </Box>\r\n\r\n            <Box\r\n              display=\"flex\"\r\n              justifyContent=\"space-between\"\r\n              p=\"10px 15px\"\r\n              borderBottom={`2px solid ${colors.primary[500]}`}\r\n            >\r\n              <Typography\r\n                color={colors.greenAccent[500]}\r\n                fontWeight=\"600\"\r\n                width=\"50%\"\r\n              >\r\n                Organization\r\n              </Typography>\r\n              <Typography\r\n                color={colors.greenAccent[500]}\r\n                fontWeight=\"600\"\r\n                width=\"50%\"\r\n              >\r\n                Location\r\n              </Typography>\r\n            </Box>\r\n\r\n            {orgList.map((org, i) => (\r\n              <Box\r\n                key={`${org.organization}-${i}`}\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"center\"\r\n                p=\"10px 15px\"\r\n                sx={{\r\n                  \"&:hover\": {\r\n                    backgroundColor: colors.greenAccent[900],\r\n                  },\r\n                }}\r\n              >\r\n                <Typography color={colors.greenAccent[500]} width=\"50%\">\r\n                  {org.organization}\r\n                </Typography>\r\n\r\n                <Typography\r\n                  color={colors.greenAccent[500]}\r\n                  fontWeight=\"600\"\r\n                  width=\"50%\"\r\n                >\r\n                  {org.location}\r\n                </Typography>\r\n              </Box>\r\n            ))}\r\n          </Box>\r\n          <Box\r\n            gridColumn=\"span 4\"\r\n            gridRow=\"span 2\"\r\n            backgroundColor={colors.primary[400]}\r\n          >\r\n            <Box\r\n              display=\"flex\"\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n              p=\"15px\"\r\n            >\r\n              <Typography\r\n                color={colors.grey[100]}\r\n                variant=\"h5\"\r\n                fontWeight=\"600\"\r\n              >\r\n                UserType by No User\r\n              </Typography>\r\n            </Box>\r\n\r\n            <ResponsiveContainer width=\"100%\" height=\"80%\">\r\n              <BarChart data={userType}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey={\"type\"} />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Bar dataKey=\"type\" fill=\"#8884d8\" />\r\n                <Bar dataKey=\"No_of_User\" fill=\"#82ca9d\" />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </Box>\r\n\r\n          <Box\r\n            gridColumn=\"span 4\"\r\n            gridRow=\"span 2\"\r\n            backgroundColor={colors.primary[400]}\r\n            padding=\"30px\"\r\n          >\r\n            <Typography variant=\"h5\" fontWeight=\"600\" color={colors.grey[100]}>\r\n              Geography Based Traffic\r\n            </Typography>\r\n            <Box height=\"200px\" mt=\"10px\">\r\n              <GeographyChart isDashboard={true} />\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"],"names":["AdminDashboard","theme","useTheme","colors","tokens","palette","mode","dashboardRef","useRef","userAdded","setUserAdded","useState","organizationcount","setOrganizationcount","countBanker","setCountBanker","orgList","setOrgList","userType","setUserType","cbhiProvider","setCbhiProvider","today","Date","setDate","getDate","useEffect","async","response","api","get","summary","data","reduce","acc","user","totalUser","Object","values","total","barData","entries","map","_ref","key","value","type","No_of_User","error","console","fetchUserList","totalOrganization","length","fetchOrganization","fetchBanker","totalProvider","Set","item","provider","size","fetchCBHI","_jsx","_Fragment","children","_jsxs","ref","style","padding","Box","display","justifyContent","alignItems","mb","gridTemplateColumns","gridAutoRows","gap","title","subtitle","icon","PersonAddIcon","sx","color","greenAccent","fontSize","ApartmentIcon","AccountBalanceIcon","stat","index","gridColumn","backgroundColor","primary","StatBox","progress","increase","gridRow","overflow","p","Typography","grey","variant","fontWeight","borderBottom","concat","width","org","i","organization","location","ResponsiveContainer","height","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","mt","GeographyChart","isDashboard"],"sourceRoot":""}