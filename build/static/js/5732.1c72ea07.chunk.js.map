{"version":3,"file":"static/js/5732.1c72ea07.chunk.js","mappings":"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","sources":["pages/supervisors/BankerComponent.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  Box,\r\n  Chip,\r\n  Tooltip,\r\n  MenuItem,\r\n  TextField,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n} from \"@mui/material\";\r\nimport { MyDataGrid } from \"../../components\";\r\n\r\nconst mockCashPayments = [\r\n  {\r\n    id: 1,\r\n    cashier: \"Cashier 1\",\r\n    hospital: \"City Hospital\",\r\n    amount: 1000,\r\n    status: \"Pending\",\r\n  },\r\n  {\r\n    id: 2,\r\n    cashier: \"Cashier 2\",\r\n    hospital: \"General Hospital\",\r\n    amount: 1500,\r\n    status: \"Pending\",\r\n  },\r\n];\r\n\r\nconst BankerComponent = () => {\r\n  const [cashPayments, setCashPayments] = useState(() => {\r\n    const storedPayments = localStorage.getItem(\"cashPayments\");\r\n    return storedPayments ? JSON.parse(storedPayments) : mockCashPayments;\r\n  });\r\n  const [selectedHosp, setSelectedHosp] = useState({ selectedHosp: \"\" });\r\n\r\n  const handleChange = (e) => {\r\n    setSelectedHosp(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"cashPayments\", JSON.stringify(cashPayments));\r\n  }, [cashPayments]);\r\n\r\n  const requestClearance = (cashierId) => {\r\n    setCashPayments((prevPayments) =>\r\n      prevPayments.map((payment) =>\r\n        payment.id === cashierId ? { ...payment, status: \"Pending\" } : payment\r\n      )\r\n    );\r\n  };\r\n\r\n  const requestAllClearance = () => {\r\n    setCashPayments((prevPayments) =>\r\n      prevPayments.map((payment) => ({\r\n        ...payment,\r\n        status: \"Pending\",\r\n      }))\r\n    );\r\n  };\r\n\r\n  const clearAllByHospital = () => {\r\n    setCashPayments((prevPayments) =>\r\n      prevPayments.map((payment) => ({\r\n        ...payment,\r\n        status: \"Pending\",\r\n      }))\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"id\", headerName: \"ID\", width: 80 },\r\n    { field: \"cashier\", headerName: \"Cashier\", width: 150 },\r\n    { field: \"hospital\", headerName: \"Hospital\", width: 200 },\r\n    { field: \"amount\", headerName: \"Amount\", width: 120 },\r\n    {\r\n      field: \"status\",\r\n      headerName: \"Status\",\r\n      width: 180,\r\n      renderCell: (params) => (\r\n        <Chip\r\n          label={params.row.status}\r\n          color={\r\n            params.row.status === \"Pending\"\r\n              ? \"warning\"\r\n              : params.row.status === \"Pending Approval\"\r\n              ? \"info\"\r\n              : \"success\"\r\n          }\r\n          variant=\"outlined\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      field: \"actions\",\r\n      headerName: \"Actions\",\r\n      width: 200,\r\n      renderCell: (params) => (\r\n        <Tooltip title=\"Request clearance for this cashier\">\r\n          <span>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              onClick={() => requestClearance(params.row.id)}\r\n              disabled={params.row.status !== \"Pending\"}\r\n            >\r\n              Request Clearance\r\n            </Button>\r\n          </span>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const formatter = new Intl.NumberFormat(\"en-us\", {\r\n    style: \"currency\",\r\n    currency: \"ETB\",\r\n    minimumFractionDigits: 2,\r\n  });\r\n\r\n  const formatAccounting = (num) => {\r\n    const formatted = formatter.format(Math.abs(num));\r\n    return num < 0 ? `(${formatted})` : formatted;\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Typography variant=\"h5\" gutterBottom align=\"center\">\r\n        Banker Dashboard\r\n      </Typography>\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Summary Card */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card variant=\"outlined\" sx={{ p: 2, backgroundColor: \"#f5f5f5\" }}>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Summary\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                Total Cashiers: {cashPayments.length}\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                Total Amount:{\" \"}\r\n                {formatAccounting(\r\n                  cashPayments.reduce((acc, p) => acc + p.amount, 0)\r\n                )}\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                Pending Clearance:{\" \"}\r\n                {cashPayments.filter((p) => p.status === \"Pending\").length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Action Buttons */}\r\n        <Grid item xs={12} md={6}>\r\n          <Box\r\n            display=\"flex\"\r\n            flexDirection=\"column\"\r\n            gap={2}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Tooltip title=\"Request clearance for all cashiers\">\r\n              <span>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  fullWidth\r\n                  onClick={requestAllClearance}\r\n                  disabled={cashPayments.every((p) => p.status !== \"Pending\")}\r\n                >\r\n                  Request Clearance for All\r\n                </Button>\r\n              </span>\r\n            </Tooltip>\r\n            <Tooltip title=\"Clear all cash payments by hospital\">\r\n              <span>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"success\"\r\n                  fullWidth\r\n                  onClick={clearAllByHospital}\r\n                  // disabled={cashPayments.every((p) => p.status === \"Cleared\")}\r\n                >\r\n                  Clear All by Hospital\r\n                </Button>\r\n              </span>\r\n            </Tooltip>\r\n            <TextField\r\n              select\r\n              fullWidth\r\n              label=\"Select Hospital\"\r\n              name=\"selectedHosp\"\r\n              value={selectedHosp}\r\n              onChange={(e) => handleChange(e)}\r\n              margin=\"normal\"\r\n              required\r\n            >\r\n              {cashPayments\r\n                .map((items) => items.hospital)\r\n                .map((type, index) => (\r\n                  <MenuItem key={index} value={type}>\r\n                    {type}\r\n                  </MenuItem>\r\n                ))}\r\n            </TextField>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Data Table */}\r\n      <Paper sx={{ marginTop: 3, padding: 2 }}>\r\n        <MyDataGrid\r\n          rows={cashPayments}\r\n          columns={columns}\r\n          disableSelectionOnClick\r\n        />\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BankerComponent;\r\n"],"names":["mockCashPayments","id","cashier","hospital","amount","status","BankerComponent","cashPayments","setCashPayments","useState","storedPayments","localStorage","getItem","JSON","parse","selectedHosp","setSelectedHosp","useEffect","setItem","stringify","columns","field","headerName","width","renderCell","params","_jsx","Chip","label","row","color","variant","Tooltip","title","children","Button","size","onClick","requestClearance","cashierId","prevPayments","map","payment","_objectSpread","disabled","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","_jsxs","Container","maxWidth","Typography","gutterBottom","align","Grid","container","spacing","item","xs","md","Card","sx","p","backgroundColor","CardContent","length","num","formatted","format","Math","abs","concat","formatAccounting","reduce","acc","filter","Box","display","flexDirection","gap","justifyContent","fullWidth","requestAllClearance","every","clearAllByHospital","TextField","select","name","value","onChange","e","target","handleChange","margin","required","items","type","index","MenuItem","Paper","marginTop","padding","MyDataGrid","rows","disableSelectionOnClick"],"sourceRoot":""}