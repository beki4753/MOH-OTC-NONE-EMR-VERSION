{"version":3,"file":"static/js/2135.b1cc6201.chunk.js","mappings":"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","sources":["components/FriendlyAgeFilterDataGrid.jsx"],"sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  TextField,\r\n  MenuItem,\r\n  Select,\r\n  InputLabel,\r\n  FormControl,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\n// Sample data\r\nconst rows = [\r\n  { id: 1, name: \"John\", age: 25 },\r\n  { id: 2, name: \"Alice\", age: 30 },\r\n  { id: 3, name: \"Bob\", age: 20 },\r\n  { id: 4, name: \"Eve\", age: 35 },\r\n];\r\n\r\n// Columns\r\nconst columns = [\r\n  { field: \"id\", headerName: \"ID\", width: 70 },\r\n  { field: \"name\", headerName: \"Name\", width: 150 },\r\n  { field: \"age\", headerName: \"Age\", width: 100 },\r\n];\r\n\r\n// Filter options\r\nconst filterOptions = [\r\n  { label: \"Equal to\", value: \"=\" },\r\n  { label: \"Greater than\", value: \">\" },\r\n  { label: \"Less than\", value: \"<\" },\r\n  { label: \"Greater or equal\", value: \">=\" },\r\n  { label: \"Less or equal\", value: \"<=\" },\r\n  { label: \"Not equal\", value: \"!=\" },\r\n  { label: \"Between\", value: \"between\" },\r\n];\r\n\r\nexport default function FriendlyAgeFilterDataGrid() {\r\n  const [operator, setOperator] = useState(\"=\");\r\n  const [filterAge, setFilterAge] = useState(\"\");\r\n  const [minAge, setMinAge] = useState(\"\");\r\n  const [maxAge, setMaxAge] = useState(\"\");\r\n\r\n  const filteredRows = useMemo(() => {\r\n    const parsedAge = parseInt(filterAge);\r\n    const min = parseInt(minAge);\r\n    const max = parseInt(maxAge);\r\n\r\n    if (operator === \"between\") {\r\n      if (isNaN(min) || isNaN(max)) return rows;\r\n      return rows.filter((row) => row.age >= min && row.age <= max);\r\n    }\r\n\r\n    if (isNaN(parsedAge)) return rows;\r\n\r\n    return rows.filter((row) => {\r\n      switch (operator) {\r\n        case \">\":\r\n          return row.age > parsedAge;\r\n        case \"<\":\r\n          return row.age < parsedAge;\r\n        case \"=\":\r\n          return row.age === parsedAge;\r\n        case \">=\":\r\n          return row.age >= parsedAge;\r\n        case \"<=\":\r\n          return row.age <= parsedAge;\r\n        case \"!=\":\r\n          return row.age !== parsedAge;\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n  }, [operator, filterAge, minAge, maxAge]);\r\n\r\n  return (\r\n    <Box sx={{ p: 2 }}>\r\n      <Grid container spacing={2} alignItems=\"center\" mb={2}>\r\n        <Grid item xs={12} sm={4}>\r\n          <FormControl fullWidth>\r\n            <InputLabel>Filter Type</InputLabel>\r\n            <Select\r\n              value={operator}\r\n              label=\"Filter Type\"\r\n              onChange={(e) => setOperator(e.target.value)}\r\n            >\r\n              {filterOptions.map((option) => (\r\n                <MenuItem key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n\r\n        {operator === \"between\" ? (\r\n          <>\r\n            <Grid item xs={6} sm={4}>\r\n              <TextField\r\n                label=\"Min Age\"\r\n                type=\"number\"\r\n                value={minAge}\r\n                onChange={(e) => setMinAge(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} sm={4}>\r\n              <TextField\r\n                label=\"Max Age\"\r\n                type=\"number\"\r\n                value={maxAge}\r\n                onChange={(e) => setMaxAge(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              type=\"number\"\r\n              label=\"Age\"\r\n              value={filterAge}\r\n              onChange={(e) => setFilterAge(e.target.value)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n\r\n      <DataGrid\r\n        rows={filteredRows}\r\n        columns={columns}\r\n        autoHeight\r\n        sx={{ minWidth: 320 }}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["rows","id","name","age","columns","field","headerName","width","filterOptions","label","value","FriendlyAgeFilterDataGrid","operator","setOperator","useState","filterAge","setFilterAge","minAge","setMinAge","maxAge","setMaxAge","filteredRows","useMemo","parsedAge","parseInt","min","max","isNaN","filter","row","_jsxs","Box","sx","p","children","Grid","container","spacing","alignItems","mb","_jsx","item","xs","sm","FormControl","fullWidth","InputLabel","Select","onChange","e","target","map","option","MenuItem","_Fragment","TextField","type","DataGrid","autoHeight","minWidth"],"sourceRoot":""}